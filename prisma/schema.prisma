generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_NEON")
}

model User {
  id              String         @id @default(uuid())
  name            String
  revTag          String         @unique
  color           String
  auth0sub        String?        @unique
  payed           Expense[]      @relation("Payer")
  participatedIn  Participant[]
  transferredTo   Transfer[]     @relation("userTo")
  transferredFrom Transfer[]     @relation("userFrom")
  QR              QR[]
  RelationFrom    UserRelation[] @relation("user1")
  RelationTo      UserRelation[] @relation("user2")
}

model Expense {
  id         String        @id @default(uuid())
  title      String
  amount     Int
  payerId    String
  payer      User          @relation("Payer", fields: [payerId], references: [id])
  items      ExpenseItem[]
  date       String?
  isAccepted Boolean
}

model ExpenseItem {
  id           String        @id @default(uuid())
  name         String
  price        Int
  participants Participant[]
  expenseId    String
  expense      Expense       @relation(fields: [expenseId], references: [id])
}

model Participant {
  id            String        @id @default(uuid())
  expenseItemId String
  item          ExpenseItem   @relation(fields: [expenseItemId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  isAccepted    ExpenseStatus
}

model Transfer {
  id         String  @id @default(uuid())
  title      String
  date       String?
  amount     Int
  userFromId String
  userFrom   User    @relation("userFrom", fields: [userFromId], references: [id])
  userToId   String
  userTo     User    @relation("userTo", fields: [userToId], references: [id])
}

model QR {
  id      String @id @default(uuid())
  title   String
  amount  Int
  payToId String
  payTo   User   @relation(fields: [payToId], references: [id])
}

enum ExpenseStatus {
  ACCEPTED
  DECLINED
  NONE
}

model UserRelation {
  id              String @id @default(uuid())
  userFrom        User   @relation("user1", fields: [user1Id], references: [id]) //if this is the tables owner
  userTo          User   @relation("user2", fields: [user2Id], references: [id])
  owesFrom        Int //this is "you owe him"
  owesTo          Int //this is "he owes you"
  transferredFrom Int //this is the amount you transferred
  transferredTo   Int //this is the amount you received as transfer
  user1Id         String
  user2Id         String
}
